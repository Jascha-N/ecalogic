diff --git a/src/main/scala/nl/ru/cs/ecalogic/analysis/EnergyAnalysis.scala b/src/main/scala/nl/ru/cs/ecalogic/analysis/EnergyAnalysis.scala
index 509eac9..10d9b20 100644
--- analysis/EnergyAnalysis.scala
+++ analysis/EnergyAnalysis.scala
@@ -141,15 +141,16 @@ class EnergyAnalysis(program: Program) {
                                            val G4 = duracellBunny(G2,elsePart)
                                            G3 max G4
 
-      case While(pred, rf, consq)       => val G2 = duracellBunny(G,pred).update("CPU","w")
+      case While(pred, rf, consq)       => val G1 = G.regress(G)
+                                           val G2 = duracellBunny(G1,pred).update("CPU","w")
                                            // this next match will be removed in later versions
                                            val iters = rf match { case Literal(x) => x }
                                            // (dont care about nice error msgs at this point)
                                            val G3 = duracellBunny(G2,consq)
                                            val G3fix = fixPoint(G3, pred, consq)
-                                           val G4 = duracellBunny(duracellBunny(G3, pred), consq)
+                                           val G4 = duracellBunny(duracellBunny(G3fix, pred), consq)
                                            // I'm not sure i understand this, but this is what the paper says.
-                                           e(G4.regress(G)._1, G3._1, G._1, iters) -> (G._2+(G3._2-G._2)*iters)
+                                           e(G4.regress(G1)._1, G3._1, G1._1, iters) -> (G1._2+(G3._2-G1._2)*iters)
 
       case Composition(stms)            => stms.foldLeft(G)(duracellBunny)
       case Assignment(_, expr)          => duracellBunny(G,expr).update("CPU","a")
diff --git a/src/main/scala/nl/ru/cs/ecalogic/model/ComponentModel.scala b/src/main/scala/nl/ru/cs/ecalogic/model/ComponentModel.scala
index 9fe869c..dbd5398 100644
--- model/ComponentModel.scala
+++ model/ComponentModel.scala
@@ -83,7 +83,7 @@ trait ComponentModel {
       val e1 = e + E(f) 
       val t2 = t1 + T(f)
       val s1 = delta(f)(s)
-      if(s1 != s) {
+      if(s1 != s || true) { // force update
         EACState(s1, t1, e1 + td(this,t1)) -> t2
       } else
         // do not update the timestamp if the state did not change
